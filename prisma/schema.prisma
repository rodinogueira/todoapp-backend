// prisma/schema.prisma

// 1️⃣ Configuração do banco de dados
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 2️⃣ Gerador do Prisma Client
generator client {
  provider = "prisma-client-js"
}

// 3️⃣ Modelos
model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  planId           Int?
  isPlanActivated Boolean @default(false)
  plan             Plans?   @relation(fields: [planId], references: [id])
  tasks    Task[]  // relação com Task
}

// Enum de planos
enum Plan {
  BRONZE
  SILVER
  GOLD
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      String   @default("pending") // "pending" ou "completed"
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plans {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String?
  price       Float?
  users       User[] // relação inversa
  features    PlanFeature[]
}

model Feature {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String?
  plans       PlanFeature[]
}

model PlanFeature {
  planId     Int
  featureId  Int

  plan       Plans      @relation(fields: [planId], references: [id], onDelete: Cascade)
  feature    Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([planId, featureId])
}

model Log {
  id         String   @id @default(uuid())
  id_company String?
  type       String
  status_code Int
  msg        String
  origin     String
  json       String? @db.Text
  created_at DateTime @default(now())
}
